library(reticulate)
use_virtualenv("datascience")
reticulate::conda_list()
use_condaenv("datascience")
library(reticulate)
use_condaenv("datascience")
reticulate::conda_binary()
reticulate::conda_list()
reticulate::use_python("D:\\Programmes\\Anaconda3\\envs\\datascience\\python.exe", TRUE)
reticulate::use_python("D:/Programmes/Anaconda3/envs/datascience/python.exe", TRUE)
reticulate::use_python("D:/Programmes/Anaconda3/envs/datascience", TRUE)
py_config()
reticulate::use_python("D:/Programmes/Anaconda3/envs/datascience/", TRUE)
reticulate::use_python("D:/Programmes/Anaconda3/envs/datascience/", TRUE)
```{r}
py_config()
py_config()
reticulate::use_python("D:/Programmes/Anaconda3/envs/datascience/python.exe", TRUE)
reticulate::use_condaenv("D:/Programmes/Anaconda3/envs/datascience/python.exe", required = TRUE)
reticulate::use_condaenv("datascience", required = TRUE)
library(reticulate)
use_condaenv("datascience", required = TRUE)
py_config()
reticulate::use_condaenv("datascience", required = TRUE)
py_config()
install.packages("reticulate")
library(reticulate)
use_condaenv("datascience", required = TRUE)
py_config()
py$data
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(reticulate)
use_condaenv("datascience", required = TRUE)
library(reticulate)
reticulate::use_condaenv("datascience")
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
library(tidyverse)
library(reticulate)
reticulate::use_condaenv("datascience")
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
library(tidyverse)
py$data %>% head %>% as_tibble
py$data %>%
ggplot() + aes(target) + geom_bar()
py$data %>% select(c(py$categorical, target)) %>%
gather(key, value, -target) %>% ggplot() +
aes(value, fill = target) + geom_bar() +
facet_wrap(.~key, scales = "free")
py$data %>% select(c(py$numerical, target)) %>%
gather(key, value, -target) %>% ggplot() +
aes(target, value, fill = target) +
geom_violin(alpha = .2) + geom_boxplot(width = .1) +
stat_summary(fun = mean, geom = "point", shape=8, size=2, fill = "black") +
facet_wrap(.~key, ncol = 3, scales = "free")
head(py$trainset)
py$scores %>% as_tibble
py$result1 %>% as_tibble
py$result2 %>% as_tibble
py$result3 %>% as_tibble %>% unnest(cols = c(clf__hidden_layer_sizes)) %>% unnest(cols = c(clf__hidden_layer_sizes))
py$result4 %>% as_tibble
py$results %>% as_tibble
library(reticulate)
reticulate::use_condaenv("datascience")
sys <- import("sys")
exe <- file.path(sys$exec_prefix, "pythonw.exe")
sys$executable <- exe
sys$`_base_executable` <- exe
# update executable path in multiprocessing module
multiprocessing <- import("multiprocessing")
multiprocessing$set_executable(exe)
library(tidyverse)
py$data %>% head %>% as_tibble
py$data %>%
ggplot() + aes(target) + geom_bar()
py$data %>% select(c(py$categorical, target)) %>%
gather(key, value, -target) %>% ggplot() +
aes(value, fill = target) + geom_bar() +
facet_wrap(.~key, scales = "free")
py$data %>% select(c(py$numerical, target)) %>%
gather(key, value, -target) %>% ggplot() +
aes(target, value, fill = target) +
geom_violin(alpha = .2) + geom_boxplot(width = .1) +
stat_summary(fun = mean, geom = "point", shape=8, size=2, fill = "black") +
facet_wrap(.~key, ncol = 3, scales = "free")
head(py$trainset)
py$scores %>% as_tibble
py$result1 %>% as_tibble
py$result2 %>% as_tibble
py$result3 %>% as_tibble %>% unnest(cols = c(clf__hidden_layer_sizes)) %>% unnest(cols = c(clf__hidden_layer_sizes))
py$result4 %>% as_tibble
py$results %>% as_tibble
library(knitr)
py$data %>% head %>% as_tibble %>% kable(caption = "Head of data")
py$data %>% head %>% as_tibble %>%
kable(caption = "Head of data", booktabs = TRUE, valign = 't')
kable(summary(py$data))
kable(summary(py$data %>% select(py$numerical)))
kable(summary(py$data %>% select(py$numerical)), "rst")
kable(summary(py$data %>% select(py$numerical)), "simple")
kable(summary(py$data %>% select(py$numerical)), "latex")
kable(summary(py$data %>% select(py$numerical)))
kable(head(py$trainset))
library("kableExtra")
install.packages("kableExtra")
library(tidyverse)
library(knitr)
library(kableExtra)
py$data %>% head %>% as_tibble %>%
kbl(caption = "Premières lignes des données", booktabs = TRUE, valign = 't')
py$data %>% head %>% as_tibble %>%
kbl(caption = "Premières lignes des données", booktabs = TRUE)
py$data %>% head %>% as_tibble %>%
kbl(caption = "Premières lignes des données", booktabs = TRUE) %>%
kable_styling(latex_options = c("striped", "scale_down"))
kbl(head(py$trainset), booktabs = T) %>%
kable_styling(latex_options =c("striped", "scale_down"))
py$scores %>% as_tibble %>% kbl(caption = "Benchmark naif", booktabs = T) %>%
kable_styling(full_width = T) %>% column_spec(1, width = "8cm")
py$scores %>% as_tibble %>% kbl(caption = "Benchmark naif", booktabs = T) %>%
kable_styling(full_width = T) #%>% column_spec(1, width = "8cm")
py$scores %>% as_tibble %>% kbl(caption = "Benchmark naif", booktabs = T)
py$scores %>% as_tibble %>% kbl(caption = "Benchmark naif")
py$scores
py$scores %>% as_tibble
py$scores %>% as_tibble %>% kbl(caption = "Benchmark naif", booktabs = T) %>%
kable_styling(full_width = T) %>% column_spec(1, width = "8cm")
py$result1 %>% as_tibble %>% kbl(caption = "Meilleurs paramètres pour la régression logistique", booktabs = T) %>%
kable_styling(latex_options =c("striped", "scale_down"))
py$result2 %>% as_tibble %>% kbl(caption = "Naive Bayes best parameters", booktabs = T) %>%
kable_styling(latex_options =c("striped", "scale_down"))
py$result3 %>% as_tibble %>% unnest(cols = c(clf__hidden_layer_sizes)) %>% unnest(cols = c(clf__hidden_layer_sizes)) %>%
kbl(caption = "Multilayer Perceptron best parameters", booktabs = T) %>%
kable_styling(latex_options =c("striped", "scale_down"))
py$result4 %>% as_tibble %>% kbl(caption = "Adaboost best parameters", booktabs = T) %>%
kable_styling(latex_options =c("striped", "scale_down"))
py$results %>% as_tibble %>% kbl(caption = "Models evaluation", booktabs = T) %>%
kable_styling(full_width = T)%>%column_spec(1, width = "8cm")
